require 'anemone'
require "weakref"
module Utils

  BSD   = "Redistribution and use in source and binary forms, with or without modification,
        are permitted provided that the following conditions are met:

        Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.

        Redistributions in binary form must reproduce the above copyright notice, this
        list of conditions and the following disclaimer in the documentation and/or
        other materials provided with the distribution."

  MIT    = "Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files the Software, to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:

        The above copyright notice and this permission notice shall be included in
        all copies or substantial portions of the Software."

  MIT2   = "Permission to use, copy, modify, and distribute this software for any
        purpose with or without fee is hereby granted, provided that the above
        copyright notice and this permission notice appear in all copies."

  APACHE = "If the Work includes a NOTICE text file as part of its
       distribution, then any Derivative Works that You distribute must
       include a readable copy of the attribution notices contained
       within such NOTICE file, excluding those notices that do not
       pertain to any part of the Derivative Works, in at least one
       of the following places: within a NOTICE text file distributed
       as part of the Derivative Works; within the Source form or
       documentation, if provided along with the Derivative Works; or,
       within a display generated by the Derivative Works, if and
       wherever such third-party notices normally appear. The contents
       of the NOTICE file are for informational purposes only and
       do not modify the License. You may add Your own attribution
       notices within Derivative Works that You distribute, alongside
       or as an addendum to the NOTICE text from the Work, provided
       that such additional attribution notices cannot be construed
       as modifying the License."

  MPL2  = "Mozilla Foundation is the license steward. Except as provided in Section
        10.3, no one other than the license steward has the right to modify or
        publish new versions of this License. Each version will be given a
        distinguishing version number."

  RUBY = "place your modifications in the Public Domain or otherwise
        make them Freely Available, such as by posting said
	    modifications to Usenet or an equivalent medium, or by allowing
	    the author to include your modifications in the software."

  def e_word(string)

    word  = Array.new();
    words = Array.new();
    flag = "close";
    for i in (0 ... string.size()) do
      if flag == "close" and string[i] =~ /[a-zA-Z]/  #/[0-9a-zA-Z]/
        flag = "open";
        word<< string[i];

      elsif flag == "open" and string[i] =~ /[a-zA-Z]/
        word<< string[i];
      elsif flag == "open";
        flag = "close";
        words << word.join();
        word.clear();
      end
    end
    return words;
  end

  def compare(source,license)

    j = 0;
    for i in (0 ... source.size()) do
      if source[i] == license[0]
        for j in (0 ... license.size()) do
          if source[j + i] == source.size()
            break
          end
          if license[j] != source[j + i]
            break
          end
        end
        if j+1 == license.size
          break
        end
      end
      if j+1 == license.size
        break
      end
    end
    if j+1 == license.size and j != 0
      return "OK";
    else
      return "ERROR";
    end

  end

  def ex_word(string)

    arr = Array.new();
    arr_license = Array.new();

    array = e_word(BSD);
    arr_license.<< [array,"bsd"];
    array = e_word(MIT);
    arr_license << [array,"MIT"]
    array = e_word(MIT2);
    arr_license << [array,"MIT2.0"]
    array = e_word(APACHE);
    arr_license << [array,"Apache"]
    array = e_word(MPL2);
    arr_license << [array,"Mozilla_Public_License_Version_2.0"]
    array = e_word(RUBY);
    arr_license << [array,"RUBY"]

    array_e = e_word(string);

    for i in (0 ... arr_license.size()) do
      if "OK" == compare(array_e,arr_license[i][0])
        #puts "this license is "+ arr_license[i][1];
        return arr_license[i][1]
        # break;
      end
    end
    return "ERROR"
  end

  def getHtmlWithAnemone(url)
      Anemone.crawl(url,:discard_page_bodies => true,:depth_limit => 0) do |anemone|
        anemone.on_every_page do |page|
         return nil  if page.not_found?
         return yield(page) if block_given?
        end
      end
  end
 
end
